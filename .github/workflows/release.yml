name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    name: Build - ${{ matrix.target }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        shell: bash
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf hemmer-provider-generator-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.tar.gz hemmer-provider-generator
          shasum -a 256 hemmer-provider-generator-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.tar.gz > hemmer-provider-generator-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.tar.gz.sha256

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a hemmer-provider-generator-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.zip hemmer-provider-generator.exe
          certutil -hashfile hemmer-provider-generator-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.zip SHA256 > hemmer-provider-generator-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.zip.sha256

      - name: Upload Release Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release

          # Create release if it doesn't exist (first job will create it)
          if ! gh release view ${{ github.ref_name }} &>/dev/null; then
            gh release create ${{ github.ref_name }} \
              --title "Release ${{ github.ref_name }}" \
              --notes "Release ${{ github.ref_name }}"
          fi

          # Upload Unix archives
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            gh release upload ${{ github.ref_name }} \
              hemmer-provider-generator-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.tar.gz \
              hemmer-provider-generator-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.tar.gz.sha256 \
              --clobber
          else
            # Upload Windows archives
            gh release upload ${{ github.ref_name }} \
              hemmer-provider-generator-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.zip \
              hemmer-provider-generator-${{ steps.get_version.outputs.version }}-${{ matrix.target }}.zip.sha256 \
              --clobber
          fi
